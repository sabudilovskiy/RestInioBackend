create database yandex;
-- auto-generated definition
create table updates
(
    id        text                     not null,
    url       varchar(255),
    parent_id text,
    date      timestamp with time zone not null,
    size      bigserial,
    type      varchar(6),
    update_id bigserial
        primary key
);
alter table updates
    owner to postgres;
-- auto-generated definition
create table files
(
    id        text                     not null
        primary key,
    url       varchar(255),
    parent_id text,
    date      timestamp with time zone not null,
    size      bigserial,
    type      varchar(6)
);

alter table files
    owner to postgres;

create function change_size(_id text, _changes bigint, _date timestamp with time zone) returns boolean
    language plpgsql
as
$$
DECLARE
    _parent_id text;
BEGIN
    --проверяем, что существует новый парент id и это папка
   If (exists(select * from files where files.id = _id)) THEN
       --обновляем размер и отправляем в updates
       with update as
           (UPDATE files SET size = size + _changes, date = _date where id = _id returning id, url, parent_id, date, size, type)
        INSERT INTO updates select * from update;
       --запоминаем parent_id
       select files.parent_id into _parent_id from files WHERE id = _id;
       --если это не налл
       if (_parent_id is not null)
           --двигаемся в рекурсию
           then PERFORM change_size(_parent_id, _changes, _date);
       end if;
       RETURN true;
    else return false;
   end if;
END;
$$;

alter function change_size(text, bigint, timestamp with time zone) owner to postgres;

create function delete_file(_id text, _arg_date text) returns boolean
    language plpgsql
as
$$
DECLARE
    _date timestamp with time zone = cast(_arg_date as timestamp with time zone);
BEGIN
    if (_date IS NOT NULL) then return private_delete_file(_id, _date);
    else return false;
    end if;
END;
$$;

alter function delete_file(text, text) owner to postgres;

create function get_updates(_arg_date text)
    returns TABLE(id text, url character varying, parent_id text, date timestamp with time zone, size bigint, type character varying)
    language plpgsql
as
$$
DECLARE
        _interval interval = '24 hour';
        _end_date timestamp with time zone = cast(_arg_date as timestamp with time zone);
        _begin_date timestamp with time zone = _end_date - _interval;
    BEGIN
         if (_end_date IS NOT NULL) then RETURN QUERY select * from files where files.date BETWEEN _begin_date and _end_date;
         else return;
         end if;
    END;
$$;

alter function get_updates(text) owner to postgres;

create function history(_id text, _arg_date_start text, _arg_date_end text)
    returns TABLE(id text, url character varying, parent_id text, date timestamp with time zone, size bigint, type character varying)
    language plpgsql
as
$$
DECLARE
    _date_start timestamp with time zone = _arg_date_start::timestamp with time zone;
    _date_end timestamp with time zone = _arg_date_end::timestamp with time zone;
    BEGIN
         RETURN QUERY select updates.id, updates.url, updates.parent_id, updates.date, updates.size, updates.type from updates
            where updates.id = _id and
                  updates.date >= _date_start or _date_start IS NULL
              and updates.date < _date_end or _date_end IS NULL;
    END;
$$;

alter function history(text, text, text) owner to postgres;

create function import_file(add_id text, arg_add_url text, add_parent_id text, arg_add_date text, arg_add_size text, add_type text) returns text
    language plpgsql
as
$$
DECLARE
    old_type       varchar(6);
    old_size       bigint;
    old_parent_id  text;
    add_date       timestamp with time zone = try_cast_to_tswtz(arg_add_date);
    add_url        varchar(255);
    add_size       bigint = cast(arg_add_size as bigint);
    exists_parent  boolean;
    exists_element boolean;
BEGIN
    if (length(arg_add_url) > 255) then return false;
    else add_url = arg_add_url;
    end if;
    if (add_type = 'FOLDER' and add_url is not null) then
        RETURN 'FOLDER and url not null';
    END IF;
    if (add_date IS NULL) then return 'date is null';
    end if;
    --проверяем, что существует новый парент id и это папка
    select exists(select * from files where files.id = add_parent_id and files.type = 'FOLDER') into exists_parent;
    IF (exists_parent) THEN
        --проверяем, что текущий элемент существует и его тип совпадает с обновлением и обновляем, записываем и в updates
        select exists(select * from files where id = add_id) into exists_element;
        if (exists_element)
        THEN
            --запоминаем старые тип, размер и айди родительского элемента
            select files.type, files.size, files.parent_id
            from files
            where files.id = add_id
            into old_type, old_size, old_parent_id;
            --проверяем, что тип не меняется
            IF (old_type = add_type) THEN
                --если тип не поменялся, то всё прекрасно
                --обновляем в files и вставляем в updates
                WITH WITH_TABLE AS (
                    UPDATE files SET (url, parent_id, date, size) =
                            (add_url, add_parent_id, add_date, add_size) WHERE id = add_id
                        RETURNING id, parent_id, url, date, size, type)
                INSERT
                INTO updates
                SELECT *
                from WITH_TABLE;
                --уменьшаем размер у старой папки на размер старого элемнта, если она была
                IF (old_parent_id is not null)
                THEN
                    PERFORM change_size(old_parent_id, -old_size, add_date);
                END IF;
                --увеличиваем размер у новой папки, если она есть
                iF (add_parent_id is not null) THEN
                    PERFORM change_size(add_parent_id, add_size, add_date);
                END IF;
            END IF;
            --либо такого элемента нет
        ELSE
            WITH WITH_TABLE AS (
                INSERT INTO files values (add_id, add_url, add_parent_id, add_date, add_size, add_type)
                    RETURNING id, parent_id, url, date, size, type)
            INSERT
            INTO updates
            SELECT *
            from WITH_TABLE;
            --увеличиваем размер у новой папки, если она есть
            iF (add_parent_id is not null) THEN
                PERFORM change_size(add_parent_id, add_size, add_date);
            END IF;
        END IF;
        RETURN 'true';
        --либо parent_id null
    ELSIF (add_parent_id is NULL) THEN
        --проверяем, что текущий элемент существует и его тип совпадает с обновлением и обновляем, записываем и в updates
        if (exists(select * from files where id = add_id and files.type = add_type))
        THEN
            WITH WITH_TABLE AS (
                UPDATE files SET (url, parent_id, date, size) =
                        (add_url, add_parent_id, add_date, add_size) WHERE id = add_id
                    RETURNING id, parent_id, url, date, size, type)
            INSERT
            INTO updates
            SELECT *
            from WITH_TABLE;
            RETURN 'true';
            --либо такого элемента нет
        elsif (NOT exists(select * from files where id = add_id)) THEN
            WITH WITH_TABLE AS (
                INSERT INTO files values (add_id, add_url, add_parent_id, add_date, add_size, add_type)
                    RETURNING id, parent_id, url, date, size, type)
            INSERT
            INTO updates
            SELECT *
            from WITH_TABLE;
            RETURN 'true';
        END IF;
        RETURN 'true';
    ELSE
        RETURN 'elem exist, but type differ';
    END if;
END;
$$;

alter function import_file(text, text, text, text, text, text) owner to postgres;

create function is_tswtz(_text text) returns boolean
    language plpgsql
as
$$
begin
  if (_text is null) then
      return true;
  else
      if (try_cast_to_tswtz(_text) is not NULL) then
          return true;
      else return false;
      END IF;
  END IF;
end;
$$;

alter function is_tswtz(text) owner to postgres;

create function private_delete_file(_id text, _date timestamp with time zone) returns boolean
    language plpgsql
as
$$
DECLARE
    _type varchar(6);
    _parent_id text;
    _size bigint;
BEGIN
    --проверяем, что существует элемент
    IF (exists(select * from files where files.id = _id)) THEN
        --запоминаем тип и парента
        SELECT INTO
            _type, _parent_id, _size
            files.type, files.parent_id, files.size
        from files where id = _id;
        --если это файл, то уменьшамем размер родителя, если он есть
        IF (_type = 'FOLDER' and _parent_id IS NOT NULL) THEN
             PERFORM change_size(_id, -_size, _date);
        END IF;
        --удаляем из обоих таблиц информацию об этом элементе
        WITH WITH_TABLE AS (
                DELETE from files where files.id = _id
                    RETURNING files.id
        )
        DELETE from updates where id = ANY (SELECT * from WITH_TABLE);
        --если это папка, то идём в рекурсию
        IF (_type = 'FOLDER') THEN
           PERFORM private_delete_file(files.id, _date) from files where parent_id = _id;
        END IF;
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END if;
	END;
$$;

alter function private_delete_file(text, timestamp with time zone) owner to postgres;

create function try_cast_to_tswtz(_text text) returns timestamp with time zone
    language plpgsql
as
$$
begin
  begin
    return _text::timestamp with time zone;
  exception
    when others then
       return NULL;
  end;
end;
$$;

alter function try_cast_to_tswtz(text) owner to postgres